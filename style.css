:root {
    --gradient: white 25%, lightskyblue;
    --black1: rgba(0, 0, 0, 0.6);
    --black2: rgba(0, 0, 0, 0.46);
}

body {
    /*Fallback*/
    background-color: lightskyblue;
    background-image: linear-gradient(--gradient);
    background-image: -o-linear-gradient(--gradient);
    background-image: -moz-linear-gradient(--gradient);
    background-image: -webkit-linear-gradient(--gradient);

    background-image: url(./background-landscape.jpg);
    background-size: cover;
    height: 98vh;
    width: auto;

    perspective: 1000px;
    -ms-perspective: 1000px;
    -moz-perspective: 1000px;
    -webkit-perspective: 1000px;
}

header {
    cursor: default;
    text-align: center;
    text-decoration: underline;
    font-family: 'Times New Roman', Times, serif;
}

main {
    transform-style: preserve-3d;
}

.container {
    position: relative;
    margin-top: 26vh;
    margin-left: 50%;
    padding: 50px;
    min-width: 300px;
    border-radius: 9px;
    box-shadow: 0 7px 7px 3px var(--black1), 0 13px 13px 7px var(--black2);

    transition: 1s;
    -o-transition: 1s;
    -moz-transition: 1s;
    -webkit-transition: 1s;

    transform: translate3d(-50%, 0, -270px) rotateX(33deg);
    -o-transform: translate3d(-50%, 0, -270px) rotateX(33deg);
    -moz-transform: translate3d(-50%, 0, -270px) rotateX(33deg);
    -webkit-transform: translate3d(-50%, 0, -270px) rotateX(33deg);

    transform-style: inherit;

    /*Initial animation*/
    @starting-style {
        opacity: 0;
        margin-left: 50%;
        transform: translate3d(-100%, 0, -270px) rotateX(33deg);
    }
}

.container:hover, .container:focus-within {
    box-shadow: none;

    transform: translate3d(-50%, 0, 0) rotateY(30deg);
    -o-transform: translate3d(-50%, 0, 0) rotateY(30deg);
    -moz-transform: translate3d(-50%, 0, 0) rotateY(30deg);
    -webkit-transform: translate3d(-50%, 0, 0) rotateY(30deg);
}

/*
    backdrop-filter & blur can
    effect the contrainer's
    transform property therefore
    I added this extra element
*/
.background {
    position: absolute;
    display: block;
    background-color: var(--black2);
    backdrop-filter: blur(2px);
    width: calc(100% + 6px);
    height: calc(100% + 6px);
    top: -2px;
    left: -2px;
    border-radius: inherit;
}

form {
    font-family: system-ui, -apple-system, 'Segoe UI', Ubuntu, 'Open Sans', sans-serif;
    color: white;
    padding: 25px;
    transform-style: inherit;
}

label {
    display: block; /*For tranform property*/
    transform-style: inherit;
}

br {
    user-select: none;
}

input{
    color: black;
    background-color: aliceblue;
    font-size: max(19px, min(1.5rem, 1vw, 25px));
    border: none;
    border-radius: 4px;
    outline: none !important;
    transition: 1s;
    -o-transition: 1s;
    -moz-transition: 1s;
    -webkit-transition: 1s;
}

input:focus, input:hover {
    transform: scale(1.1) translate3d(20px, 0, 100px);
    -o-transform: scale(1.1) translate3d(20px, 0, 100px);
    -moz-transform: scale(1.1) translate3d(20px, 0, 100px);
    -webkit-transform: scale(1.1) translate3d(20px, 0, 100px);
}

button {
    cursor: pointer;
    user-select: none;
    color: white;
    background-color: rgba(70, 70, 70, 0.3);
    padding: 10px;
    border: none;
    border-radius: 7px;

    transition: 0.8s;
    -o-transition: 0.8s;
    -moz-transition: 0.8s;
    -webkit-transition: 0.8s;

    /*
        backdrop-filter of button
        inherits the value of
        the background element
        so I set it to zero
    */
    backdrop-filter: blur(0);
}

button:hover {
    color: white;
    background-color: transparent;
}

@media only screen and (max-width: 1140px) {
    input {
        max-width: 200px
    }
}

@media only screen and (max-width: 981px) {
    body {
        perspective: 790px;
        -ms-perspective: 1000px;
        -moz-perspective: 1000px;
        -webkit-perspective: 1000px;
    }

    .container {
        padding-left: 25px;
        padding-right: 25px;
    }

    input:focus, input:hover {
        transform: scale(1.05) translate3d(-17px, 8px, 70px);
        -o-transform: scale(1.05) translate3d(-17px, 8px, 70px);
        -moz-transform: scale(1.05) translate3d(-17px, 8px, 70px);
        -webkit-transform: scale(1.05) translate3d(-17px, 8px, 70px);
    }
}

@media only screen and (max-width: 720px) {
    .container {
        padding-left: 15px;
        padding-right: 15px;
    }
}

@media only screen and (max-height: 750px) {
    .container {
        margin-top: 15vh;
        padding-top: 25px;
        padding-bottom: 25px;
    }
}

@media only screen and (max-height: 480px), (max-width: 793px) {
    body {
        height: 128vh;
    }
}

@media only screen and (max-width: 360px) and (max-height: 640px), (max-height: 410px) {
    header {
        font-size: 12px;
    }

    .container {
        margin-top: 5vh;
        padding: 5px;
    }
}

@media only screen and (orientation: portrait) {
    body {
        background-image: url(./background-portrait.jpg);
    }

    .background {
        background-color: var(--black1);
    }

    button {
        color: black;
        background-color: rgba(250, 250, 250, 0.75);
    }
}